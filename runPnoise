#!/usr/bin/env python3
# Description {{{1
"""
Simulate Resistor Flicker Noise with PNoise Analysis

Usage:
    runPnoise [options]

Options:
    -v, --verbose  turn on verbose mode
    -b, --broken   use the broken version of the model

Run a PNoise simulation on Verilog-A and built-in resistor models exhibiting
flicker noise driven by a sinusoidal excitation.

The frequency and amplitude of the excitation are set by the variables f0 and
ampl in this program.

The model "res_va" in the resistor.va file is used as is the built-in spectre
resistor model. The simulation results match those in the paper "Flicker Noise
Formulations in Verilog-A Compact Models" by G. J. Coram, C. C. McAndrew, K. K.
Gullapalli, and K. S. Kundert. It has been accepted for publication in IEEE
Trans. CAD some time in 2020.

The file resistor.va preserves the sign of the noise modulation, so that the
simulation results are correct: the flicker noise is up-converted to be centered
around f0.  With the command-line option --broken, the incorrect implementation
of flicker noise, found in broken.va, is used instead. The absolute value causes 
loss of the sign of the modulation and you get the incorrect results shown in 
Fig. 2 in the above paper.

Simulation Parameters:
    f0 (fₒ)= 2**17 "Hz"             # frequency of the sinusoid
    ptsPerCycle = 64                # number of desired point per cycle
    cycles = 2048*16                # total number of cycles
    T = 1.0/f0 "s"                  # period of one cycle
    dt = T/ptsPerCycle "s"          # (desired) time between transient simulation samples
    tstop = T*cycles "s"            # stop time for transient simulation
    fmin = 1.0*int(1.0/tstop) "Hz"  # minimum frequency for analysis
    fmax = f0*ptsPerCycle/2.0 "Hz"  # maximum frequency for analysis
    ptsPerDec = 2000                # number of frequency points per decade
                                    # for the noise analysis
    ampl = 100mV                    # amplitude of the sinusoid
"""

# Imports {{{1
from docopt import docopt
from inform import Inform, Error, comment, display, fatal, os_error, done
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter
from quantiphy import Quantity
from psf_utils import PSF
from shlib import Run, to_path, render_command, set_prefs as shlib_set_prefs
from textwrap import dedent
import re

# Initialization {{{1
cmdline = docopt(__doc__)

broken = cmdline['--broken']
Inform(verbose=cmdline['--verbose'], logfile=True, colorscheme=None)
shlib_set_prefs(use_inform=True)

# Globals {{{1
# paths {{{2
spectre_exe = "spectre"                         # Spectre executable
working_model_file = to_path("resistor.va")     # working Verilog-A model file
broken_model_file = to_path("broken.va")        # broken Verilog-A model file
netlist_file = to_path("pnoise.scs")            # Spectre netlist file
log_file = netlist_file.with_suffix('.log')     # Spectre logfile
results_dir = netlist_file.with_suffix('.raw')  # simulation results directory
psf_file = results_dir / 'pnoise.pnoise'        # PNoise PSF file
sim_cmd = (spectre_exe, '=log', log_file, '-format', 'psfascii', netlist_file)

# plotting preferences {{{2
use_sci_notation = False  # alternative is to use SI scale factors

# simulation parameters {{{2
# Extract the simulation parameters from description and add them as local vars
params = Quantity.extract(__doc__)
globals().update(params)

# netlist {{{2
with Quantity.prefs(prec='full', spacer='', unity_sf='_'):
    model_file = broken_model_file if broken else working_model_file
    netlist = dedent(f"""
        // Resistor flicker noise simulations

        simulator lang=spectre

        ahdl_include "{model_file!s}"

        model rref resistor kf=1.0e-6 af=2 // to match res_va

        Vin    (n 0) vsource type=sine dc=1.0 sinedc=0.0 ampl={ampl} freq={f0}
        R1     (n 0) res_va
        R2     (n 0) rref r=100.0

        noise  noise start={fmin} stop={fmax} dec={ptsPerDec} oprobe=Vin
        pss    pss fund={f0}
        pnoise pnoise start={fmin} stop={fmax} dec={ptsPerDec} maxsideband=10 oprobe=Vin
    """)
    netlist_file.write_text(netlist.lstrip())

# output parameters if verbose {{{2
comment(f'Parameters:')
for k, v in params.items():
    comment(f'    {v:S}')

# simulate {{{1
try:
    comment('\nRunning:')
    comment('   ', render_command(sim_cmd, {'=log': 1, '-format': 1}))
    spectre = Run(sim_cmd, 'soEW0')
except OSError as e:
    fatal(os_error(e))
except Error as e:
    if e.stdout:
        comment(e.stdout)
    e.terminate(
        culprit = spectre_exe,
        codicil = f'See {log_file} for more information.'
    )

# plot results {{{1
Quantity.set_prefs(
    prec = 2,
    map_sf = Quantity.map_sf_to_sci_notation,
    output_sf = 'YZEPTGMkmunpfazy',
    minus = Quantity.minus_sign,
)

# map noise units to simpler unicode representations
unit_maps = [
    (r'sqrt\(([^)]+)\)', r'√\1'),
    (r'\^2', r'²'),
]
def fix_units(u):
    for s, r in unit_maps:
        u = re.sub(s, r, u)
    return u

try:
    # Extract data from psf file
    results = PSF(psf_file, sep=':')
    sweep = results.get_sweep()
    x_name = sweep.name
    x_units = sweep.units
    x = sweep.abscissa
    va_sig = results.get_signal('R1:total')
    y_units = fix_units(va_sig.units)
    y_va = va_sig.ordinate
    ref_sig = results.get_signal('R2:total')
    y_ref = ref_sig.ordinate

    # build axis formatters
    x_axis_formatter = FuncFormatter(
        lambda v, p: Quantity(v, x_units).render()
    )
    if use_sci_notation:
        adjust_plot_bounds = dict(left=0.2, right=0.98)
        y_axis_formatter = FuncFormatter(
            lambda v, p: Quantity(v, y_units).render(form='eng')
        )
    else:
        adjust_plot_bounds = dict(left=0.15, right=0.98)
        y_axis_formatter = FuncFormatter(
            lambda v, p: Quantity(v, y_units).render(form='si')
        )

    # create the pnoise plot
    figure, axes = plt.subplots(1, 1)
    figure.subplots_adjust(**adjust_plot_bounds)
        # need to shift the figure a bit to the right because of y-axis labels
    axes.plot(x, y_va, linewidth=2, label='RESva')
    axes.plot(x, y_ref, linewidth=2, label='RESref')
    axes.legend(frameon=False, loc='best')
    axes.set_xscale('log' if results.log_x(sweep) else 'linear')
    axes.set_yscale('log' if results.log_y(sweep) else 'linear')
    axes.xaxis.set_major_formatter(x_axis_formatter)
    axes.yaxis.set_major_formatter(y_axis_formatter)
    plt.suptitle(f'Flicker Noise of Resistor with {f0} Sinusoidal Drive')
    plt.show()
except Error as e:
    e.terminate()
except KeyboardInterrupt as e:
    done()
